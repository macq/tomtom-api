from pathlib import Path
from typing import List, Optional, Union

import click

from tomtom_api import config
from tomtom_api.priority_queue.lib import (pretty_print_queue,
                                           priority_queue_add_job,
                                           priority_queue_clean_folder,
                                           priority_queue_list_all,
                                           priority_queue_list_next,
                                           priority_queue_update_job)
from tomtom_api.priority_queue.models.daemon import PriorityQueueDaemon
from tomtom_api.priority_queue.models.database import PriorityQueueDB
from tomtom_api.priority_queue.models.queue import QueueItem
from tomtom_api.priority_queue.models.status import QueueItemStatus
from tomtom_api.traffic_stats.models.jobs.route import TomtomRouteJob


@click.group()
def queue():
    pass


@queue.command
@click.argument('action', type=click.Choice(['start', 'stop', 'restart', 'status']))
@click.option('-p', '--pid-file', type=click.Path(), help='Path to the file that will hold the daemon pid.')
def daemon(action: str, pid_file: Optional[Path] = None):
    """Manage the tomtom-api queue daemon."""
    daemon = PriorityQueueDaemon(pid_file)

    if action == 'start':
        daemon.start()
    elif action == 'stop':
        daemon.stop()
    elif action == 'restart':
        daemon.restart()
    elif action == 'status':
        click.echo(daemon.status())
    else:
        raise Exception('Action must be either "start", "stop" or "restart".')


@queue.command
@click.option('-s', '--silent', is_flag=True, default=False)
def queue_clean(silent: bool = False) -> None:
    """Clean the files generated by the priority queue."""
    if not silent:
        click.confirm('This action is irreversible. Do you want to continue?', abort=True)
    priority_queue_clean_folder()


@queue.command
@click.option('-n', '--name', type=str, help='The name of the job.')
@click.option('-d', '--data', type=click.Path(), help='The path to the JSON of the TomtomJob.')
@click.option('-p', '--priority', type=int, default=5, show_default=True,
              help='The priority of the job. Higher the value, higher the priority.')
def queue_add_job(name: str, data: Union[TomtomRouteJob, Path], priority: int) -> None:
    """Add a job to the tomtom priority queue."""
    priority_queue_add_job(name, data, priority)


@queue.command
@click.option('-i', '--uid', type=str, multiple=True,
              help='Filter based on the UID (TomtomJob hash). If multiple are provided, the filter uses the OR operator.')
@click.option('-n', '--name', type=str, multiple=True,
              help='Filter based on the name. If multiple are provided, the filter uses the OR operator.')
@click.option('-p', '--priority', type=str, multiple=True,
              help='Filter based on the priority. This will parse input such as ">5" and "<=9". If multiple are provided, the filter uses the AND operator.')
@click.option('-s', '--status', type=click.Choice(['waiting', 'submitted', 'completed', 'canceled']), multiple=True,
              help='Filter based on the status. If multiple are provided, the filter uses the OR operator.')
def queue_list(
    uid: Optional[Union[str, List[str]]] = None,
    name: Optional[Union[str, List[str]]] = None,
    priority: Optional[Union[str, List[str]]] = None,
    status: Optional[Union[str, List[str]]] = None,
) -> None:
    """List the jobs inside the tomtom priority queue.

    If multiple options are used, the AND operator is used between those.
    """
    uid, name, priority, status = list(uid), list(name), list(priority), list(status)
    status = None if status is None else [QueueItemStatus(name.lower()) for name in status]
    items = priority_queue_list_all(uid, name, priority, status)
    click.echo(pretty_print_queue(items))


@queue.command
@click.option('-n', type=int, default=1, help='The n next jobs that will be launched.')
def queue_next(n: int = 1) -> None:
    """Get the next job(s)"""
    items = priority_queue_list_next(n)
    if len(items) > 0:
        click.echo(pretty_print_queue(items))
    else:
        click.echo('Not a single job remaining in the queue.')


@queue.command
def queue_stats(n: int = 1) -> None:
    """Get the next job(s)"""
    from tabulate import tabulate
    db = PriorityQueueDB()
    info = db.describe()
    click.echo(tabulate(info.items(), headers=['Keys', 'Values'], tablefmt='rounded_outline'))


@queue.command
@click.option('-i', '--uid', type=str, required=True, help='the UID of the element that needs to be modified.')
@click.option('-n', '--name', type=str, help='The new name.')
@click.option('-p', '--priority', type=int, help='The new priority')
@click.option('--cancel/--no-cancel', help='toggle the cancellation of an item with this option.')
@click.option('-d', '--data', type=click.Path(), help='The path to the JSON of the TomtomJob.')
def queue_update_job(
    uid: str,
    name: Optional[str] = None,
    priority: Optional[int] = None,
    cancel: Optional[bool] = None,
    data: Optional[Union[TomtomRouteJob, Path]] = None,
) -> bool:
    """Update the queue item identified by the UID

    Do not provide the options of the fields that are not modified.

    (The UID is in fact the TomtomJob json hashed by md5)
    """
    priority_queue_update_job(uid, name, priority, cancel, data)
